#!/bin/bash

# Copyright (C) 2010, 2011 Jon Ander Hern√°ndez
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


[ -z   "$KESTREL_SHARE" ] && KESTREL_SHARE=/usr/share/kestrel
[ ! -d "$KESTREL_SHARE" ] && KESTREL_SHARE="${0%/*}/share"

# load kestrel_lib
. "$KESTREL_SHARE"/kestrel-lib
. "$KESTREL_SHARE"/reconfigure-lib

export_config

# List of images to reconfigure
array_images=
verbose=default

usage() {
echo "
Usage: ${0##*/} [options] command

Commands:
   --configure
     Reconfigures the system

   --enable
     Enable KestrelCluster on the system

   --disable
     Disable KestrelCluster on the system

   --status
     Shows the status if KestrelCluster

   --edited
     List files installed or modified files

   --edited-info [file]
     Show information of the saved files and versions

   --templates [<stage>]
     List aplicable templates or scripts

   --restore <file>
     Restore the original file

   --diff <file> [<version>] [<version>]
     Show the difference between the edited file and the original

   --log <stage> [<time>|last]
     View log file

   --options [option]
     List kestrel options

   --set-option <variable> <value>
     Set kestrel option

   --ask
     Ask kestrel options

Options:
     
   --image [<image>]
     Select an image
     
   --system
     Select the frontend
     
   --quiet
   --verbose

   --force
     Runs again the install stage
"
}


# internal functions
#####################

configure_system() {
    local image_name=
    local image_dir=
    
    echo -e "Configuring the system\n"
    
    # Restore system configure state
    restore_stage "configure" ""
    
    # Restore node configure state
    image_dir="system"
    restore_stage "system-configure" ""
    unset image_dir
    
    if [[ -n "${force}" ]]; then
        system_install "${event:-install}"
    else
        system_configure "${event:-configure}"
    fi
}


configure_image() {
    local image_name=$1
    local image_dir=${KESTREL_IMAGE_DIR}/${image_name}
    
    echo -e "\nConfiguring the image \"${i}\"\n"
    
    # Verify the image is not being used by a node
    if [ -f ${KESTREL_LOCK_DIR}/${image_name}.running ]; then
        warn "The image ${image_name} is being used by some node"
        return 1
    fi
    
    # Lock the image, so nobody can start any node while the image is being
    # modified
    (
        lock_image ${image_name}
        
        mount_chroot_image ${image_dir}
        
        (
            close_lock            
            if [[ -n "${force}" ]]; then
                node_install "${event:-install}"
            else
                node_configure "${event:-configure}"
            fi
        )
        sync 
        
        umount_chroot_image ${image_dir}
    )
}


configure_configure() {
    [ -n "${force}" ] || check_enabled "${verbose}" || return 0
    
    configure_system
    
    for i in $(list_images); do
        
        configure_image "${i}"
        
    done
}


# reconfigure_enable
# 
#     Enables KestrelHPC on the frontend : 
#       - runs install scripts.
#       - reconfigures the frontend.
#       - reconfigures all the images.
#         (forced reconfigure, so it also reinstalls everything on the images).

configure_enable() {
    [ -z "${force}" ] && check_enabled "" && 
        die "Kestrel already enabled"
    
    [[ "${array_images}" != @("all"|"") ]] &&
        warn "--${event} command ignores --image and--system options since it configures all, the system and all the nodes"
    
    detect_system
    
    [ ! -e ${KESTREL_ETC}/kestrel.conf ] && ask_config
    
    local force=enable
    
    configure_configure
}


# configure_disable
# 
#     Disables KestrelHPC on the frontend :
#       - runs install scripts in uninstall mode.

configure_disable() {
    [ -n "${force}" ] || check_enabled "${verbose}" || return 0
    
    local force=enable
    
    configure_configure
    
    restore_all ""
}


# ask_config
# 
#     

ask_config() {
    FILE=${KESTREL_ETC}/kestrel.conf
            
    run_script "${KESTREL_SHARE}/ask.d"
}


# applied_image
# 
#     Calcule to which image (or to the system) we should apply the command
#     having a look to the list_images array.

applied_image() {
    if [ -n "${array_images}" ]; then
        if [[ "${array_images}" == "system" ]]; then
            image_name=""
            image_dir=""
        else
            image_name="${array_images}"
            image_dir="${KESTREL_IMAGE_DIR}/${image_name}"
        fi
    else
        image_name=""
        image_dir=""
    fi
}


# option handling
##################

for param in "$@"; do
    case $param in
        --quiet)
            unset verbose
            ;;
        --force)
            force=true
            ;;
        --verbose|-v)
            verbose=true
            ;;
        --version)
            kestrel_version
            ;;
        --help|-h)
            usage
            ;;
     esac
done


# If no parameter is specified
(( $# == 0 )) && usage-error


while (( $# > 0 )); do
    case ${1} in
        --image)
            # Check for the optional parameter
            if [[ ! "${2}" =~ ^--.+ && -n "${2}" ]]; then
                image=$2
                shift
            else
                image=default
            fi
            
            check_image ${image}
            
            [[ "${array_images}" != "all" ]] &&
            array_images=(${image} ${array_images[@]})
            ;;
            
        --system|--frontend)
            [[ "${array_images}" != "all" ]] &&
            array_images=(system ${array_images[@]})
            ;;
            
        --enable|--disable|--configure)
            # Ensure this script is executed as root
            check_root
            
            configure_${1#--}
            ;;
            
        --status)
            check_enabled "die"
            
            /etc/init.d/kestrel_daemon status
            ;;
            
        --edited)
            # Ok
            [[ -z "${2}" || "${2}" =~ ^--.* ]] || info=${2}
            
            applied_image
            list_edited_files "${image_dir}" "${info}"
            
            [ -n "${info}" ] && { unset info; shift 1; }
            ;;
            
        --edited-info)
            # Ok
            [[ -z "${2}" || "${2}" =~ ^--.* ]] || info=${2}
            
            applied_image
            backup_files_info "${image_dir}" "${info}"
            
            [ -n "${info}" ] && { unset info; shift 1; }
            ;;
            
        --templates)
            applied_image
            
            if [[ -n "${2}" && ! "${2}" =~ ^--.*$ ]]; then
                check_stage "$2" || die "Invalid stage \"${2}\""
                
                applicable_templates "$2"
                
                shift 1
                
            else
                applicable_templates ""
            fi
            ;;
            
        --restore)
            die "ToDo"
            ;;
            
        --diff)
            [[ -z "${2}" || "${2}" =~ ^--.* ]] && usage-error
            
            file=${2}
            
            if [[ -n "${3}" && ! "${3}" =~ ^--.* ]]; then
                vers=${3}
                if [[ -n "${4}" && ! "${4}" =~ ^--.* ]]; then
                    vers2=${4}
                    shift 1
                fi
                shift 1
            fi
            
            applied_image
            
            diff_files "${image_dir}" "${file}" "${vers}" "${vers2}"
            
            unset vers
            unset vers2
            shift 1
            ;;
            
        --log)
            applied_image
            
            [[ -z "${2}" || "${2}" =~ --.* ]] && usage-error
            
            check_stage "$2" || die "Invalid stage \"${2}\""
            
            if [[ "${3}" =~ ^--.* ]]; then
                show_log_file "${2}"
            else
                show_log_file "${2}" "${3}"
                shift 1
            fi
            
            shift 1
            ;;
            
        --options)
            if [[ -n "${2}" && ! "${2}" =~ --.* ]]; then 
               if variable_list | grep -qE "^${2}$"; then
                   echo "${!2}"
               else
                   die "Invalid option \"${2}\""
               fi
               shift
            else
               variable_values
            fi
            ;;
            
        --set-option)
            [ -z "${2}" -o -z "${3}" ] && usage-error
            
            variable_list | grep -Eq "${2}" || die "Invalid option: \"${2}\""
            
            check_root
            
            set_key_value "${2}" "${3}" /etc/kestrel/kestrel.conf
            
            shift 2
            ;;
            
        --ask)
            check_root
            
            ask_config
            ;;
            
        --quiet|--force|--version|-v|--help|-h|--verbose)
            ;;
            
        *)
            usage-error
            ;;
    esac
    shift
done

exit 0
