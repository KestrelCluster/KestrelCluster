#!/bin/bash

# Copyright (C) 2010, 2011 Jon Ander Hern√°ndez
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[ -z "$KESTREL_SHARE" ] && KESTREL_SHARE=/usr/share/kestrel

KESTREL_VERSION="2.1"

# Loads the config from the config file default.conf, from the defaul.d dir
# and from the user's

. ${KESTREL_SHARE}/kestrel-chroot-lib
. ${KESTREL_SHARE}/defaults-lib 


# Image functions
##################


# mount_chroot_image <image_dir>
# 
# Mount proc, sys, dev and tmp within the directory containing the image, which
# is a necessary step for a complete working system once chrooted.

mount_chroot_image(){
    local image_dir=$1

    mount -t proc none ${image_dir}/proc
    mount -t sysfs node ${image_dir}/sys
    mount -t tmpfs -o rw,noatime,mode=755 tmpfs ${image_dir}/tmp

    #mount -t tmpfs -o rw,nosuid,mode=0755 tmpfs ${image_dir}/var/run
    #mount -t tmpfs -o rw,noexec,nosuid,nodev tmpfs ${image_dir}/var/lock

    mount -t devpts -o rw,noexec,nosuid,gid=5,mode=0620 devpts ${image_dir}/dev/pts
    mount -t tmpfs -o rw,nosuid,nodev tmpfs ${image_dir}/dev/shm

    # Share apt's preferences, package's cache, etc...
    for mount in etc/apt/ \
                 var/lib/apt/lists/ \
                 var/cache/apt/
    do
         mount --bind /${mount} ${image_dir}/${mount}
    done

    # Create a fake initctl and a fake start-stop-daemon to prevent dpkg from
    # starting services when installing or upgrading those services
    [ -x "${image_dir}/sbin/start-stop-daemon" ] &&
    mv ${image_dir}/sbin/start-stop-daemon \
       ${image_dir}/sbin/start-stop-daemon.real

    [ -x "${image_dir}/sbin/initctl" ] &&
    mv ${image_dir}/sbin/initctl \
       ${image_dir}/sbin/initctl.real

    ln ${image_dir}/bin/true ${image_dir}/sbin/start-stop-daemon
    ln ${image_dir}/bin/true ${image_dir}/sbin/initctl
}


# umount_chroot_image <image_dir>
# 
#     Unmounts the chrooted image.

umount_chroot_image(){
    local image_dir=$1

    for mount in proc sys tmp       \
                 dev/{pts,shm}      \
                 etc/apt/           \
                 var/lib/apt/lists/ \
                 var/cache/apt/
    do
         umount ${image_dir}/${mount}
    done

    [ -x "${image_dir}/sbin/start-stop-daemon.real" ] &&
    mv -f ${image_dir}/sbin/start-stop-daemon.real \
          ${image_dir}/sbin/start-stop-daemon

    [ -x "${image_dir}/sbin/initctl.real" ] &&
    mv -f ${image_dir}/sbin/initctl.real \
          ${image_dir}/sbin/initctl

}


# check_image <image_name>
# 
#     Check if ${image_name} contains the name of an installed and valid image.
#     
#     If check_image is used as parameter, it doesn't check if the image is 
#     running.

check_image() {
    
    [ -n "$1" ] && image_name=$1
    
    [[ "${image_name}" =~ ^${image_re}$ ]] ||
        die "Invalid image name \"${image_name}\""
    
    # If the image is the "default" one, get which image it points to
    if [ "${image_name}" = "default" ]; then
        image_name=$(default-image)
        image_dir=${KESTREL_IMAGE_DIR}/${image_name}
        
        if [ -z "$image_name" ]; then
            die "There is no node image available" \
                "Create an image with :" \
                "   sudo kestrel-images --new \"image_name\""
        fi
    fi
    
    [ "${image_name}" = "cached-image" ] &&
        die "Invalid image name, \"cached-image\" is reserved"
    
    # Verify if the image exists
    [ -z "${image_dir}" -o ! -d "${image_dir}/usr" ] &&
        die "The image \"${image_name}\" hasn't been found"
    
    # Verify the image is not being currently used
    [[ -f "${KESTREL_IMAGE_DIR}/.${image_name}.running" && \
          "$1" != "no_running_check" ]] &&
        die "The image \"${image_name}\" is being used by some client node"
}


# list_images
# 
#     List installed images

list_images() {
    ls -1 ${KESTREL_IMAGE_DIR} | grep -Ev "default|cached-image"
}


# default-image
# 
#     Show the default image

default-image() {
    [ -e ${KESTREL_IMAGE_DIR}/default ] &&
    echo $(basename $(readlink -n ${KESTREL_IMAGE_DIR}/default))
}


# lock_image <image_name>
#
# example :
# (
#    lock_image test_image
# 
#    critical section
# )

lock_image() {
    local image_name=$1

    exec 200> ${KESTREL_LOCK_DIR}/${image_name}.lock

    if ! flock --nonblock --exclusive 200; then
        echo "Waiting till the image gets unlocked"
        flock --exclusive 200
    fi
}


# rm_lock_image
# 
#     Delete lock

rm_lock_image() {
    rm ${KESTREL_LOCK_DIR}/${image_name}.lock
}



# User and Permission functions
################################

# check_user
# 
#     Check if the user belongs to the kestrel group

check_user() {
    if ! list_users | grep -Eq "^$(whoami)$"; then
        die "User \"$(whoami)\" is not member of the KestrelHPC group." \
            ""                                                          \
            "Add the user to the cluster with : "                       \
            "   sudo kestrel-users --add-to-cluster $(whoami)"
    fi
}


# list_users
# 
#     List the users members of the group kestrel

list_users() {
    echo $KESTREL_USER
    sed -nr "s/^${KESTREL_GROUP}:.*:.*:(.+)$/\1/p" /etc/group | sed 's/,/\n/g'
}


home_dir() {
    sed -nr "s/^${1}:.*:.*:.*:.*:(.*):.*/\1/p" < /etc/passwd
}


# user_sshkeygen <user>
# 
#    Recreate ssh keys for the user, and add them to 'authorized_keys' allowing
#    password-less authentication into the cluster nodes.

user_sshkeygen() {
    local user=$1
    local user_group=$(id -gn ${user})
    local user_home=$(home_dir ${user})
    local user_khome=/${KESTREL_HOME}/${user}

    [[ "${user_home}" == "${user_khome}" ]] &&
        warn_config \
            "KESTREL_HOME=\"${KESTREL_HOME}\"" \
            "For security reasons we recommend not exporting the /home/ dir"
    
    # Ensure ~/.ssh and $KESTREL_HOME/.ssh directories exist
    mkdir -p   ${user_home}/.ssh
    mkdir -p  ${user_khome}/.ssh
    chown ${user}:${user} ${user_khome}
    chmod 700  ${user_home}/.ssh
    chmod 700 ${user_khome}/.ssh
    
    # Create a link from $HOME/$user/kestrel to $KESTREL_HOME/$user
    home_link=${user_home}/kestrel
    [[ ! "/${KESTREL_HOME}/" == "/home/" ]] &&
    [[ -L ${home_link} || ! -e ${home_link} ]] &&
        ( cd /; ln -snf ${user_khome} ${home_link} )
    
    rm  ${user_home}/.ssh/kestrel_id_dsa{,.pub} 2>/dev/null
    
    if [[ "/${KESTREL_HOME}/" != "/home/" ]]; then
        rm ${user_khome}/.ssh/authorized_keys 2>/dev/null
    else
        test_backup ${user_khome}/.ssh/authorized_keys
    fi
    
    ssh-keygen -q -t dsa -N "" -f "${user_home}/.ssh/kestrel_id_dsa"
    
    # Add the created public certiticate to the authorized keys file on the 
    # exported kestrel-home
    cat     <  ${user_home}/.ssh/kestrel_id_dsa.pub \
           >> ${user_khome}/.ssh/authorized_keys
    chmod 600 ${user_khome}/.ssh/authorized_keys
    
    # Ensure the .ssh/* files have the correct owner/group and permissions.
    chown -R ${user}:${user_group}  ${user_home}/.ssh
    chown -R ${user}:${user_group} ${user_khome}/.ssh
}


# check_root
# 
#     Ensure this script is executed as root

check_root() {
    if (( $(id -u) != 0 )); then
        die "You need root rights to do this action."
    fi
}


# Check if the user has rights

#check_image_perm() {
#    (( $(id -u) != 0 )) && sudo $0 $@
#    
#    grep -Eq "^$1$"
#}



# Util functions
#################

# kestrel_version
# 
#     Show KestrelHPC version

kestrel_version() {
    echo "KestrelHPC ${KESTREL_VERSION}"
}


# kestrel_dialog <action> <title> text[@] <options>*
# 
#     Dialog

#     action  : menu | inputbox | msgbox | yesno | checklist
#     text[@] : Array containing each line of the text to be displayed
#     options*: List of options.
#               Menu      : "tag_name" "text"      Returns the selected tag
#               Checklist : "tag_name" "text" 0|1  Returns the selected tags
#     
#     Examples :
#         Array containing the text where each line is an element
#             text=("text line1" "text line2")
#
#         menu dialog:
#             kestrel_dialog menu "title text" text[@] \
#                            "tag1" "text1" "tag2" "text2"
#         checklist dialog:
#             kestrel_dialog checklist "title text" text[@] \
#                            "tag1" "text1" 0 "tag2" "text2" 1
#

kestrel_dialog() {
    local action=$1
    local  title=$2
    local text_a=("${!3}")
          text_a=${text_a:-$3}
    
    shift 3
    local options=("${@}")
    
    # Defaults
    local dialog=whiptail # TODO maybe check for gdialog
    local height=6
    local width=60
    local text
    
    # Count the number of lines, compute the max width and add "\n" to each line
    local i=0
    for line in "${text_a[@]}"; do
        (( ${width}  < ${#line} + 3 )) && 
             width=$(( ${#line} + 3 ))
        
        text=${text}${line}$'\n'
        ((i++))
    done
    
    # Compute the height and the width of each type of dialog
    local j
    case "${action}" in
        menu)
            # Count the number of entries and compute the max width
            local k=0
            j=0
            local max_col1=0
            local max_col2=0
            while (( k < ${#options[@]} )); do
                (( ${max_col1}  < ${#options[k]}   )) && 
                     max_col1=$(( ${#options[k]}   ))
                (( ${max_col2}  < ${#options[k+1]} )) && 
                     max_col2=$(( ${#options[k+1]} ))
                (( k+=2 )); (( j++ ))
            done
            (( ${width}  < ${max_col1} + ${max_col2} + 3 )) && 
                 width=$(( ${max_col1} + ${max_col2} + 3 ))
            
            (( ${height}  < ${j} + ${i} + 7 )) && 
                 height=$(( ${j} + ${i} + 7 ))
            ;;
        checklist)
            # Count the number of entries and compute the max width
            local k=0
            j=0
            local max_col1=0
            local max_col2=0
            while (( k < ${#options[@]} )); do
                (( ${max_col1}  < ${#options[k+1]}  )) && 
                     max_col1=$(( ${#options[k+1]}  ))
                (( ${max_col2}  < ${#options[k+2]} )) && 
                     max_col2=$(( ${#options[k+2]} ))
                (( k+=3 )); (( j++ ))
            done
            (( ${width}  < ${max_col1} + ${max_col2} + 3 )) && 
                 width=$(( ${max_col1} + ${max_col2} + 3 ))
            
            (( ${height}  < ${j} + ${i} + 6 )) && 
                 height=$(( ${j} + ${i} + 6 ))
            ;;
        inputbox)
            (( ${height}  < ${i} + 7 )) && 
                 height=$(( ${i} + 7 ))
            ;;
        msgbox|yesno)
            (( ${height}  < ${i} + 6 )) && 
                 height=$(( ${i} + 6 ))
            ;;
        *)
            return 0
            ;;
    esac

    # Run the dialog
    ${dialog} --backtitle "KestrelHPC ${KESTREL_VERSION}"           \
              --title "${title}"                                    \
              --${action}  "${text}" "${height}" "${width}" ${j}    \
              "${options[@]}" 3>&2 2>&1 1>&3-
}


# question_yN <question>
# 
#     Ask questions whose answer is true or false, example of use :
#     
#     question_yN "question" \
#         && echo "the answer was 'yes'" \
#         || echo "the answer was 'no' or something else"
#     
#     Note: Only use it on the tools not in any hook or config script

question_yN() {
    echo -e "${indent:-"    "}${1} (y/N)? "
    read response
    # Check if the response is 'y' or 'yes' in a case insensitive way
    [[ $response =~ ^[[:space:]]*([yY]|[yY][eE][sS])[[:space:]]*$ ]]
}


# msg <messages>*
# 
#     Show messages if verbose mode is on

msg() {
    [ "$VERBOSE" == "yes" -o "$VERBOSE" == "1" ] &&
    while (( $# > 0 )); do
        echo -e "${indent:-"    "}${1}"
        shift
    done    
}


# die <messages>* [error number]
# 
#     Show a message and exit with error

die() {
    while (( $# > 0 )); do
        if [[ ! "${1}" =~ ^[0-9]+$ ]]; then
            echo -e "${indent:-"    "}${1}"
            shift
        else
            break
        fi
    done
    
    exit ${1:-1}
}


# warning <messages>*
# 
#     Show a warning message

warning() {
    while (( $# > 0 )); do
        echo -e "${indent:-"    "}Warning: ${1}"
        shift
    done
}


# usage-error
# 
#     Show usage and exit with error

usage-error() {
    usage
    exit 1;
}


# eval_variables <expression>
# 
#     Expands the variables on <expression>

eval_variables() {
    eval echo $@
}


# run_from_script
# 
#     When we reconfigure kestrel, we use a lock which makes any other kestrel
#     command wait till everything is reconfigured. While the reconfiguration
#     stage we restart several daemons, and some of them may inherit our lock
#     locking kestrel.
#
#     This function runs a daemon in a subshell after having closed our lock's
#     file descriptor.

run_from_script(){
    # Create a subshell and close the descriptor
    (   exec 200>&-
        $@
    )
}


# check_kestrel_daemon
# 
#     Checks if the kestrel daemon is running

check_kestrel_daemon() {
    detect_iface

    [ ! -f /etc/init.d/kestrel_daemon ] &&
        die "KestrelHPC is disabled" \
            "\t-Enable with : sudo kestrel-reconfigure --enable"
    
    /etc/init.d/kestrel_daemon status &> /dev/null || \
    if [ -z ${KESTREL_IFACE} ]; then
        die "No network interface was found with ip: \"${FRONTEND_IP}\"." \
            "" \
            "\t-Edit the configuration file: /etc/kestrel/kestrel.conf" \
            "\t-Check the FRONTEND_IP variable" \
            "\t-Reconfigure the frontend and the images: sudo kestrel-reconfigure --all"
    else
        /etc/init.d/kestrel_daemon restart ||
        die "KestrelHPC Daemon is not running and failed to start." \
            "\t-Check the log file for more info: /var/log/kestrel.log"
    fi
}
