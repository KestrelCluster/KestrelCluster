#!/bin/bash

# Copyright (C) 2011 Jon Ander Hern√°ndez
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# create_evaluation_script
# 
#     Creates a sed script for replacing the variables found on templates with
#     their values.

create_evaluation_script() {
    # Apply variable sustitution rules when a non escaped "$" character is found
    local script='/(^|[^\\])\$/{'
    
    # Create a sustitution rule for each variable
    for var in $(variable_list); do
        re='s#\$\{'"${var}"'\}#'"${!var}"'#g;'
        script="${script}${re}"
    done
    
    [ -n "${image_name}" ] && 
        script="${script}"'s#\$\{image_name\}#'"${image_name}"'#g;'
    
    [ -n "${image_dir}" ] && 
        script="${script}s"'#\$\{image_dir\}#'"${image_dir}"'#g;'
    
    export evaluation_script="${script}"'};/\\\$(\w|\{)/s/\\\$/$/g'
}


# find_templates <subdir> [<find options>]
# 
#     Returns a list of templates found on <subdir>.
# 
#     Notes:
#       - Any template can be replaced by the user including a template with the 
#         same name on /etc/kestrel/ directory.
#       - Labels allow to have multiple templates/scripts for a single file.
#       - When a template is replaced, only the replaced file's flags will be
#     
#     Each line contains the following data:
#         </path/to/the/template> <template_name> <flags> <label>
#     
#     Example:
#         /home/jonan/test/usr/image/etc/ssh(mode=0400)/kestrel image/etc/ssh(mode=0400)/kestrel
#     

find_templates() {
    local  subdir=$1
    shift
    
    local file
    local label
    local path
    local flags_re
    local find_re
    
    exec 3>&2-
    exec 2>/dev/null
    
    # Absolute path to KESTREL_SHARE and to KESTREL_ETC
    local share_dir
    local   etc_dir
    
    [ -d "${KESTREL_ETC}" ] &&
      etc_dir=$( cd   ${KESTREL_ETC}/${subdir} && pwd)
    share_dir=$( cd ${KESTREL_SHARE}/${subdir} && pwd)
    
    # Obtain only the path ignoring the flags (contained between parenthesis)
    #local path_re="(([^\/]*\/)*[^\(\/]+)"
    local path_re="(([^\(]+))"
    # Obtain: 1.- the string with the parenthesis
    #         2.- the string between the parenthesis (the flags)
    #         3.- the string between "" (the label)
    local flags_re="(\(([^\"]*(\"[^\"]*\")?.*)\))?"
    
    # List scripts on ${share_dir} and on ${etc_dir}
    ( 
      [ -d "${share_dir}" ] && cd "${share_dir}" &&
      find . -type f $@
      
      [ -d "${etc_dir}"   ] && cd "${etc_dir}" &&
      find . -type f $@
      
    ) | \
    
    # - Delete the starting "./". 
    # - Output the filename without any flag.
    # - Output the label. A script only gets overriden by one on ${etc_dir} if
    #   the the script has the same filename and the same label.
    sed -r 's#^\./'"${path_re}${flags_re}"'$#\1 \5#' | \
    
    # sort them and remove duplicates
    sort | uniq | \
    
    while read file label; do
        
        [ -n "${label}" ] &&
        flags_re="([^\"]*${label}[^\"]*)" ||
        flags_re="\(([^\"]*)\)?"
        
        find_re="^\(${etc_dir}\|${share_dir}\)/+${file}${flags_re}$"
        
        find ${etc_dir:+${etc_dir}/} ${share_dir}/ \
             -regex "${find_re}" -type f -print -quit
        
    done | \
    
    sed -r "s#^(${share_dir}|${etc_dir})/${path_re}${flags_re}"'$#\0 \2 \5 \6#'
    
    exec 2>&-
    exec 2>&3-
}


# check_flags
# 
#     
check_flags() {
    local flag
    local IFS="\,"
    for flag in ${flags2} ${flags}; do
        
        case "${flag}" in
            
            # chroot mode or nochroot mode (by default)
            chroot)
                chroot="yes"
                ;;
            nochroot)
                unset chroot
                ;;
            
            #  edit mode or template mode (by default)
            edit|run|package)
                run="${flag}"
                ;;
            template)
                unset run
                ;;
            
            # OS flags
            os=*-*)
                [ "${flag#os=}"   == "${OS_DISTRIBUTION}-${OS_CODENAME}" ] ||
                [ "${flag#os=}"   == "${OS_DISTRIBUTION}-${OS_RELEASE}"  ] ||
                return 1
                ;;
            os=*)
                [ "${flag#os=}"   == "${OS_DISTRIBUTION}" ] ||
                return 1
                ;;
            arch=*)
                [ "${flag#arch=}" == "${OS_ARCHITECTURE}" ] ||
                return 1
                ;;
            
            # Mode flags
            user=*)
                user=${flag#user=}
                ;;
            group=*)
                group=${flag#group=}
                ;;
            mode=*)
                mode=${flag#mode=}
                ;;            
            link=*)
                link=${flag#link=}
                ;;
            
            # Check a variable flag
            \$[a-zA-Z\-\_]*$|\$\{[a-zA-Z\-\_]*\})
                [[ "${flag}" =~ ^\$\{?([^}]*)\}?$ ]] &&
                if [ "${!BASH_REMATCH[1]}_${image_name}" == "yes" ]; then
                   true
                elif [ "${!BASH_REMATCH[1]}_${image_name}" == "no" ] ||
                     [ "${!BASH_REMATCH[1]}" != "yes" ]]; then
                     
                    # Only restore if we are really running the template
                    #[ -n "${action}" ] && restore_file
                    return 1
                fi
                ;;
            
            # Label
            \"*\")
                label=${flag}
                
                # Check if the label is disabled
                variable=${label}_disabled
                [ "${!variable}" == "true" ] && return 1
                
                variable=${label}_${image_name}_disabled
                [ "${!variable}" == "true" ] && return 1
                ;;
            
            sh|python)
                ;;
            
            ?*)
                warn "unsupported flag: \"${flag}\" on file: \"${path}\""
                ;;
        esac
    done
    return 0
}


# run_template <template_path> <template> <flags> <label> 
#                <os_dir> <flags2> <args>+
# 
#     Template information (obtained from a "find_templates" call)
#
#       <template_path>   = Path to the template/script
#       <template>        = Name of the template/script
#       <flags>           = Flags
#       <label>           = Label
#     
#     Context parameters
#       
#       <os_dir>          = "" or an image directory.
#       <flags2>          = Additional flags. Useful for overriding the default 
#                           flags.
#       <args>            = @("install" | "uninstall" | "enable" | "disable") +
#                           more_options*
#

run_template() {
    local   path=$1
    local   file=$(evaluate_template <<<$2)
    local  flags=$3
    local  label=$4
    local os_dir=${5%/}
    local flags2=$6
    
    shift 6
    
    local event=$1
    local  args=$@
    
    # default values
    local chroot
    local run
    local user
    local group
    local mode
    local link
    local label
    
    local ret
    local dest_file
    local dest_stat
    local FILE
    
    check_flags || return 0
    
    export file event user group mode link
    
    if [ -n "${run}" ]; then
        
        if [[ "${args}" == @(install|enable|configure) ]]; then
            
            echo "script: ${path}"
            echo "tofile: ${file}"
            [ -n "${label}" ] && echo "label:  ${label}"
            [ -n "${user}"  ] && echo "user:   ${user}"
            [ -n "${group}" ] && echo "group:  ${group}"
            [ -n "${mode}"  ] && echo "mode:   ${mode}"
            [ -n "${link}"  ] && echo "link:   ${link}"
            echo
            
            local tofile=${file}
            
            # If a file is being edited, first create a backup or create the file
            [[ "${run}" == "edit" ]] &&
                test_backup
            
            # Run the package script
            if [[ "${run}" == "package" && "${args}" != "configure" ]]; then
                local packages=$(. ${path} )
                
                msg "package:  ${path}" >&3
                
                echo -e "install:${packages}\n" \
                    >> ${os_dir}/${KESTREL_LOG_DIR}/apt-history
                
                echo -e "install:${packages}\n" \
                    >> ${os_dir}/${KESTREL_LOG_DIR}/apt-output
                
                export LANG=C
                export DEBIAN_FRONTEND=noninteractive
                export DEBIAN_PRIORITY=critical
                export DEBCONF_NONINTERACTIVE_SEEN=true
                
                if [ -n "${os_dir}" ]; then 
                    chroot ${os_dir} \
                    apt-get -q -y --force-yes install ${packages} \
                        >> ${os_dir}/${KESTREL_LOG_DIR}/apt-output
                else
                    apt-get -q -y --force-yes install ${packages} \
                        >> ${os_dir}/${KESTREL_LOG_DIR}/apt-output
                fi
                
                ret=$?
                
            # Run the edit or run script
            elif [[ ! -n "${chroot}" ]]; then
                
                [[ "${run}" == "edit" ]] &&
                    msg "edit:     /${file#/}" >&3 ||
                    msg "script:   ${file}" >&3
                
                FILE="${os_dir}/${file}"
                
                . "${path}" ${args}
                
                ret=$?
                
            # Run the edit or run script under a chroot
            else
                
                [[ "${run}" == "edit" ]] &&
                    msg "edit:     /${file#/}" >&3 ||
                    msg "script:   ${file}" >&3
                
                export FILE=${file}
                
                # Copy the basic chroot kestrel-lib
                cat < ${KESTREL_SHARE}/kestrel-chroot-lib > ${os_dir}/tmp/hook
                
                # Copy the script to the chroot
                cat < ${path} >> ${os_dir}/tmp/hook
                chmod 755 ${os_dir}/tmp/hook
                
                # Avoid any locale setting
                export LANG=C
                chroot ${os_dir} /tmp/hook ${args}
                
                ret=$?
                
                rm /tmp/hook
            fi
            
            [[ "${run}" == "edit" ]] &&
                perms_and_backup
            
        # uninstall
        else
            
            echo "file: /${file}"
            echo
            
            if [[ "${run}" == "edit" ]]; then
                
                restore_file
            
            # Run the package script
            elif [[ "${run}" == "package" && -n "${os_dir}" ]]; then
                local packages=$(. ${path} )
                
                msg "package:  ${file}" >&3
                
                echo -e "remove:${packages}\n" \
                    >> ${os_dir}/${KESTREL_LOG_DIR}/apt-history
                
                echo -e "remove:${packages}\n" \
                    >> ${os_dir}/${KESTREL_LOG_DIR}/apt-output
                
                export LANG=C
                export DEBIAN_FRONTEND=noninteractive
                chroot ${os_dir} apt-get -qq -y remove ${packages} \
                    >> ${os_dir}/${KESTREL_LOG_DIR}/apt-output
                
                ret=$?
                
            # Run the edit or run script under a chroot
            elif [[ ! -n "${chroot}" ]]; then
                
                msg "script:   ${file}" >&3 
                
                FILE="${os_dir}/${file}"
                
                . "${path}" ${args}
                
                ret=$?
                
                echo
                
            # Run the edit or run script
            else
                
                msg "script: ${file}" >&3
                
                export FILE=${file}
                
                # Copy the basic chroot kestrel-lib
                cat < ${KESTREL_SHARE}/kestrel-chroot-lib > ${os_dir}/tmp/hook
                
                # Copy the script to the chroot
                cat < ${path} >> ${os_dir}/tmp/hook
                chmod 755 ${os_dir}/tmp/hook
                
                # Avoid any locale setting
                export LANG=C
                chroot ${os_dir} /tmp/hook ${args}
                
                ret=$?
                
                echo
                
                rm /tmp/hook
            fi
        fi
        
    else
        
        if [[ ! "${args}" == @(install|enable|configure) ]]; then
            restore_file
            
        else
            
            msg "template: /${file#/}" >&3
            
            echo "template: ${path}"
            echo "tofile:   /${file#/}"
            [ -n "${user}"  ] && 
                echo "user:     ${user}"  ||  user=$(stat -c %u "${path}")
            [ -n "${group}" ] && 
                echo "group:    ${group}" || group=$(stat -c %g "${path}")
            [ -n "${mode}"  ] && 
                echo "mode:     ${mode}"  ||  mode=$(stat -c %a "${path}")
            [ -n "${link}"  ] && echo "link:     ${link}"
            echo
            
            template_file "${path}" "${file}"
        fi
        
        [ "${file%/*}" == "etc/init.d" ] && install_service || true
    fi
    
    return ${ret:-$?}
}

# install_service
# 
#     Create the links of init scripts

install_service() {
    
    [ -n "${os_dir}" ] && chroot="chroot ${os_dir}"
    [ -n "${chroot}" ] && chroot="chroot ${os_dir}"
    
    if [[ ! "${args}" == @(install|enable) ]]; then
        
        ${chroot} update-rc.d -f ${file##*/} remove
        
    else
        # Remove the init script links
        ${chroot} update-rc.d -f ${file##*/} remove
        
        local pri_start pri_stop run_start run_stop
        
        pri_start=$(sed -rn 's/\s*#\s*Run-Level-Start:\s*([0-9]+)$/\1/p' ${path})
         pri_stop=$(sed -rn 's/\s*#\s*Run-Level-Stop:\s*([0-9]+)$/\1/p'  ${path})
        
        [ -z "${pri_start}" ] && pri_start=20
        [ -z "${pri_stop}"  ] &&  pri_stop=20
        
        run_start=$(sed -rn 's/\s*#\s*Default-Start:\s*(([S0-6]\s*)*)$/\1/p' ${path})
         run_stop=$(sed -rn 's/\s*#\s*Default-Stop:\s*(([S0-6]\s*)+)$/\1/p'  ${path})
        
        [ -z "${run_start}" ] && run_start="2 3 4 5"
        [ -z "${run_stop}"  ] &&  run_stop="0 1 6"
        
        # Add the start and stop links
        ${chroot} update-rc.d ${file##*/} start ${pri_start} ${run_start} .
        ${chroot} update-rc.d ${file##*/} stop  ${pri_stop}  ${run_stop}  .
    fi
}


# applicable_templates <stage>
# 
#     List applicable templates
#     
#     Note: Requires $image_dir and $image_name to be already set

applicable_templates() {
    local stage="${1}"
    local dir
    
    if [ -z "${image_dir}" ]; then
        if [ -n "${stage}" ]; then
            dir="system/${stage}.d"
        else
            dir="system"
        fi
    else
        if [ -n "${stage}" ]; then
            dir="node/${stage}.d"
        else
            dir="node"
        fi
    fi
    
    find_templates "${dir}" |
    while read path FILE flags label; do
        check_flags || continue
        echo "${path}"
    done
}


# test_applicable_templates <stage>
# 
#     List applicable templates (for testing purposes)
#     
#     Note: Requires $image_dir and $image_name to be already set

test_applicable_templates() {
    local stage="${1}"
    local dir
    
    if [ -z "${image_dir}" ]; then
        dir="system/${stage}.d"
    else
        dir="node/${stage}.d"
    fi
    
    find_templates "${dir}" |
    while read path FILE flags label; do
        echo "path:     $path"
        chroot=
        run=
        user=
        group=
        mode=
        link=
        label=
        
        check_flags || continue
        
        echo "name:     $FILE"
        echo
        echo "run:      ${run:-no}"
        [ -n "${run}" ] &&
        echo "template: no" ||
        echo "template: yes"
        echo "chroot:   ${chroot:-no}"
        echo 
        echo "user:     $user"
        echo "group:    $group"
        echo "mode:     $mode"
        echo "link:     $link"
        echo "label:    $label"
        echo
    done
}



# backup functions
###################

# search_backup_files
# 
#     Searches a backup file

search_backup_file() {
    local file=${file:-$1}
    local result
    
    #   ${file}  =~ [optional/path/]filename[.version]
    if [[ "${file}" =~ ^${backup_re}$ ]]; then
         dirname=${BASH_REMATCH[1]}
         version=${BASH_REMATCH[3]%\:actual}
         version=${version:-\:last}
        filename=${BASH_REMATCH[2]}
    else
        die "Invalid filename: \"${file}\""
    fi
    
    # Look for the file
    if [[ ! -e "${os_dir}/${KESTREL_BACKUP_DIR}/${file}" ]]; then
        # Escape the dots for using it as a the regular expression
        local file_re="${dirname}${filename}${version}"
              file_re="${file_re//./\\.}"
        if [[ "${version}" =~ ^${version_link_re}$ ]]; then
            result=$( find "${os_dir}/${KESTREL_BACKUP_DIR%/}/"  -type l \
                           -iregex "^.*/${file_re}$" -print -quit )
        else
            result=$( find "${os_dir}/${KESTREL_BACKUP_DIR%/}/"  \
                           -iregex "^.*/${file_re}$" -print -quit )
        fi
    else
        result="${os_dir}/${KESTREL_BACKUP_DIR%/}/${file}"
    fi
    
    if [ -z "${result}" ]; then
        die "File not found: \"${file}\""
    
    elif [ -L "${result}" ]; then
        version=$(readlink -n "${result%/*}/${filename}${version}")
        file="${result#${os_dir}/${KESTREL_BACKUP_DIR%/}/}"
        result="${file%/*}/${version}"
    
    else
        result="${result#${os_dir}/${KESTREL_BACKUP_DIR%/}/}"
    fi
    
    [[ "${result}" =~ ^${backup_re}$ ]]
     dirname=${BASH_REMATCH[1]}
     version=${BASH_REMATCH[3]}
    filename=${BASH_REMATCH[2]%${version}}
}


# get_backup_version <file> <vers>
# 
#     Get backup file

get_backup_version() {
    local file="${1}"
    local vers="${2}"
    local   dir=${os_dir%/}/${KESTREL_BACKUP_DIR#/}
    
    if [[ "${vers}" == "actual" ]]; then
        
        [ -e "${os_dir}/${file}" ] &&
            filename="${os_dir}/${file}" ||
            filename=""
        
    elif [[ "${vers}" == @(orig|last) ]]; then
        
        [ -e "${dir}/${file}:${vers}" ] &&
            filename="${dir}/${file}:${vers}" ||
            filename=""
        
    elif [[ ":${vers}" =~ ^${version_re}$ ]]; then
        
        [ -e "${dir}/${file}:${vers}" ] &&
            filename="${dir}/${file}:${vers}" ||
            die "Version \"${vers}\" not found"
        
    elif [[ "${vers}" =~ ^${log_time_re}$ ]]; then
        
        local year=${BASH_REMATCH[1]}
        local time=${BASH_REMATCH[3]}
        local date=$(date -d "${year} ${time}" "+%s")
        
        [ -e "${dir}/${file}:${date}" ] &&
            filename="${dir}/${file}:${date}" ||
            die "Version \"${vers}\" not found"
        
    else
        die "Version \"${vers}\" not found"
    fi
}


# list_backup_versions <os_dir> file[:(version|last|actual)]
# 
#     List the versions of a saved file

list_backup_versions() {
    local os_dir="${1}"
    local   file="${2}"
    local dirname
    local version
    local filename
    
    search_backup_file "${file}"
    
    ( cd "${os_dir}/${KESTREL_BACKUP_DIR}/${dirname}"
      
      # List backup files which match the regular expression
      find . -regextype posix-egrep \
             \( -type l -iregex ".*/${filename}${version_link_re}$" \) \
             -o         -iregex ".*/${filename}${version_back_re}$" ) | \
      while read file; do
          file="${file##*\:}"
          case ${file} in
              [0-9]*)
                  echo $file
                  date -d "@${file}" "+%F_%T"
                  ;;
              last)
                  echo -e "last\nactual"
                  ;;
              *)
                  echo $file
          esac
      done
}


# list_original_files <os_dir>
# 
#     List the saved original files

list_original_files() {
    local os_dir="${1}"
    
    ( cd "${os_dir}/${KESTREL_BACKUP_DIR}/";
    
      # List backup files which match the regular expression
      find . -type l -regextype posix-egrep -iregex "${backup_link_re}$" | 
      
      # Remove "./". Show only last files
      sed -rn 's#\.\/##; s#^(.*)\:orig$#\1#p' ) | sort
}


# list_edited_files
# 
#     List edited files

list_edited_files() {
    local os_dir="${1}"
    
    [ -d "${os_dir}/${KESTREL_BACKUP_DIR}/" ] &&
    ( cd "${os_dir}/${KESTREL_BACKUP_DIR}/";
        
      # List backup files which match the regular expression
      find . -regextype posix-egrep \
             -type l -iregex "${backup_last_re}$" | 
      
      sed -r 's#\.\/'${backup_last_re}'#\1\2#' | uniq
    )
}


# list_all_backup_files <os_dir> [file]
# 
#     List all the versions of all the saved files or list all the versions of
#     a saved file.

list_all_backup_files() {
    local os_dir="${1}"
    local   file="${2}"
    local dirname
    local version
    local filename
    
    if [ -n "${file}" ]; then
        search_backup_file "${file}"
        
        [ -d "${os_dir}/${KESTREL_BACKUP_DIR}/" ] &&
        ( cd "${os_dir}/${KESTREL_BACKUP_DIR}/"

          filename="${dirname}${filename}"

          find . -regextype posix-egrep \
             \( -type l -iregex ".*/${filename}${version_link_re}$" \) \
             -o         -iregex ".*/${filename}${version_back_re}$" |
          
          # Remove "./". Add a new entry ":actual" for each ":last" entry
          sed -r 's#\.\/##; s#^((.*)\:last)$#\1\n\2:actual#' )
     
     else
        [ -d "${os_dir}/${KESTREL_BACKUP_DIR}/" ] &&
        ( cd "${os_dir}/${KESTREL_BACKUP_DIR}/";
        
          # List backup files which match the regular expression
          find . -regextype posix-egrep \
             \( -type l -iregex "${backup_link_re}$" \) \
             -o         -iregex "${backup_back_re}$" | 
          
          # Remove "./". Add a new entry ":actual" for each ".last" entry
          sed -r 's#\.\/##; s#^((.*)\:last)$#\1\n\2:actual#' )
     fi | sort
}


# backup_files_info
# 
#     Shows information about the saved backups.
#     Note: It doesn't show an entry for each :last/:orig files, instead the 
#           the entry pointed by those files is marked with an O or a L.

backup_files_info() {
    local os_dir="${1}"
    local   file="${2}"
    local    dir=${os_dir}/${KESTREL_BACKUP_DIR}/
    
    list_all_backup_files "${1}" "${2}" | while read file; do
        
        [[ "${file}" =~ ^${backup_re}$ ]]
        local version=${BASH_REMATCH[3]}

        if [[ "${version}" == @(":actual"|":last"|":orig") ]]; then
            continue
        else
            local date=$(date -d "@${version#:}" "+%F %T")
            local type=" "
            
            # Check if is a last or a orig file
            if [[ -e "${dir}/${file%:*}:last" ]]; then
                local file2=$(readlink -n "${dir}/${file%:*}:last")
                [[ "${file##*/}" == "${file2}" ]] && type="L"
            fi
            
            if [[ -e "${dir}/${file%:*}:orig" ]]; then
                local file2=$(readlink -n "${dir}/${file%:*}:orig")
                [[ "${file##*/}" == "${file2}" ]] && type="O"
            fi
            
            msg "${date}  ${type}  ${file}"
        fi
        
    done
}


# diff_files <os_dir> <file> [<version>] [<version>]
# 
#     Compare files versions.
#     - If no version is pass tries to compare between the current version and
#       and the original version. If the original version doesn't exists then
#       it shows a message.

diff_files() {
    local os_dir="${1}"
    local   file="${2}"
    local  vers1="${3}"
    local  vers2="${4}"
    local dirname
    local version
    local filename
    local file1
    local file2
    
    search_backup_file "${file}"
    file=${dirname}${filename}
    
    touch /tmp/$$-empty
    
    get_backup_version ${file} ${vers1:-actual}
    file1=${filename:-/tmp/$$-empty}
    
    get_backup_version ${file} ${vers2:-orig}
    file2=${filename:-/tmp/$$-empty}
    
    diff -urN ${file2} ${file1}
    
    rm /tmp/$$-empty
}



# log functions
################

# check_log_dates <stage>
# 
#     List of log dates

check_log_dates() {
    local stage="${1}"
    local   log="${image_dir}/${KESTREL_LOG_DIR}/${stage}"
    
    if [ -f "${log}" ]; then
        grep -E "${log_time_re}" "${log}"
    else
        die "Log file \"${stage}\" not found"
    fi
}


# list_log_dates <stage>
# 
#     List of log dates

list_log_dates() {
    local stage="${1}"
    local   log="${image_dir}/${KESTREL_LOG_DIR}/${stage}"
    
    [ -f "${log}" ] &&
        sed -rn 's#^'"${log_time_re}"'$#\1_\3#p'
}


# show_log_file <stage> [<log_date>]
# 
#     Show a log. If no <log date> is specified, show the last log.

show_log_file() {
    local stage="${1}"
    local  time="${2}"
    local   log="${image_dir}/${KESTREL_LOG_DIR}/${stage}"
    
    if [ -z "${time}" ]; then
        
        [ -e "${log}" ] && cat "${log}"
        
    else
        if [ "${time}" == last ]; then
            
            time=$(list_log_dates ${1} | tail -n1)
            
        elif ! [[ ${time} =~ ${log_time_re} ]]; then
            
            die "Invalid time: ${time}"
            
        fi
         
        [ -e "${log}" ] && sed -rn "/^${time}$/,/^${log_time_re}$/ {
            /^${log_time_re}$/!p; /^${time}$/p; }" "${log}"
        
    fi
}


# list_log_files
# 
#     List of log files

list_log_files() {
    [ -d  ${image_dir}/${KESTREL_LOG_DIR} ] &&
    ls -1 ${image_dir}/${KESTREL_LOG_DIR}
}



# stage configuration functions
################################

# list_stages
# 
#     List stages

list_stages() {
    if [ -z "${image_dir}" ]; then
        ls -1 ${KESTREL_SHARE}/system
    else
        ls -1 ${KESTREL_SHARE}/node
    fi | sed 's/\.d$//'
}


# check_stage
# 
#     Check if exists the stage <stage>

check_stage() {
    if [ -z "${image_dir}" ]; then
        [ -d ${KESTREL_SHARE}/system/$1.d ]
    else
        [ -d ${KESTREL_SHARE}/node/$1.d ]
    fi
}


# restore_all <os_dir>
# 
#     Restore all the backup files

restore_all() {
    local os_dir="${1}"
    
    [ -d ${os_dir}/${KESTREL_BACKUP_DIR}/ ] &&
    ( cd ${os_dir}/${KESTREL_BACKUP_DIR}/
      find . -type l -iregex '.*:last$' ) | \
    while read file; do
        file=${file%:last}
        restore_file
    done
}


# restore_stage <stage> <os_dir>
# 
#     Restore the backup files of a stage

restore_stage() {
    local  stage="${1}"
    local os_dir="${2}"
    
    if [ -z "${image_dir}" ]; then
        dir="system/${stage}.d"
    else
        dir="node/${stage}.d"
    fi
    
    find_templates "${dir}" ! -iregex '.*/\(check\|run\|restart\)\..*' \
                            ! -iregex '.*/[^\/\(]\(.*run.*\)' | \
    while read path file flags label; do
        restore_file
    done
}


# configuration_error
# 
#    Shows the command to check the log

run_configuration_error() {
    msg -n "   error, check the log : kestrel-configure "
    
    [ -n "${image_name}" ] &&
        echo -n "--image ${image_name} "
    
    echo "--log ${stage} ${config_date} ${FILE}"
}


# run_configuration_stage <stage> [<optional flags>]
# 
#     Runs the configuration stage
#     
#     Note: Requires $image_dir, $image_name $event vars to be already set

run_configuration_stage() {
    local os_dir="${1}"
    local  stage="${2}"
    local  oflag="${3}"
    local    log="${image_dir}/${KESTREL_LOG_DIR}/${stage}"
    local    dir
    
    if [ -z "${image_dir}" ]; then
        dir="system/${stage}.d"
    else
        dir="node/${stage}.d"
    fi
    
    [ -z "${config_date}" ] && config_date=$(date "+%F_%T")
    
    mkdir -p "${log%/*}"
    
    {
        echo ${config_date}
        echo "event: ${event}"
        echo "===================" 
    } >> "${log}" 2>&1
    
    exec 3>&1
    
    msg ${stage}
    inc_indent
    
    find_templates "${dir}" -iregex '.*/check\..*' |
    while read path FILE flags label; do
        run_template "${path}" "${FILE}" "${flags}" "${label}" \
                     "${os_dir}" "run,${oflag}" "${event}"  \
                     >> "${log}" 2>&1 || 
            run_configuration_error
        
    done
    
    load_config
    create_evaluation_script
    
    find_templates "${dir}" ! -iregex '.*/\(check\|run\|restart\)\..*' |
    while read path FILE flags label; do
        run_template "${path}" "${FILE}" "${flags}" "${label}" \
                     "${os_dir}" "${oflag}"     "${event}"  \
                     >> "${log}" 2>&1 ||
            run_configuration_error
        
    done
    
    find_templates "${dir}" -iregex '.*/\(run\|restart\)\..*' |
    while read path FILE flags label; do
        run_template "${path}" "${FILE}" "${flags}" "${label}" \
                     "${os_dir}" "run,${oflag}" "${event}"  \
                     >> "${log}" 2>&1 || 
            run_configuration_error
        
    done
    
    dec_indent
    
    exec 3>&-
}



# Funtions to be used from kestrel-reconfigure
###############################################

node_configure() {
    local event="${event:-configure}"
    
    run_configuration_stage "${image_dir}" "configure"
    
    check_enabled &&
    run_configuration_stage ""             "system-configure"
}


node_install() {
    local event="${1:-install}"
    
    if check_enabled &&
       [[ "${event}" == "uninstall" || "${force}" == "enable" ]]; then
        run_configuration_stage ""             "system-install"
        run_configuration_stage ""             "system-configure"
    fi
    
    if [[ "${event}" != "uninstall" ]]; then
        run_configuration_stage "${image_dir}" "pre-install"
        run_configuration_stage "${image_dir}" "packages" "package"
        run_configuration_stage "${image_dir}" "install"
        
        check_enabled &&
        run_configuration_stage ""             "system-install"
        
        node_configure
    fi
}


system_configure() {
    local event="${event:-configure}"
    local image_dir=
    local image_name=
    
    run_configuration_stage "" "configure"
}


system_install() {
    local event="${1:-install}"
    local image_dir=
    local image_name=
    
    run_configuration_stage "" "pre-install"
    run_configuration_stage "" "packages" "package"
    run_configuration_stage "" "install"
    
    system_configure
}

