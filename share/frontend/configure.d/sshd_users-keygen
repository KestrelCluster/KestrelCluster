#!/bin/bash

# Create backup of ssh_config
[ ! -e /etc/ssh/ssh_config.bak ] &&
cp /etc/ssh/ssh_config /etc/ssh/ssh_config.bak


if grep -Eq "Host[[:space:]]+${KESTREL_HOSTNAME}-\*" /etc/ssh/ssh_config; then

    # Deletes the old kestrel_hostname entry. Deletes everything between the old
    # Host kestrel-* entry and the next Host entry
    sed -ri "
    /^[[:space:]]*[Hh]ost[[:space:]]+${KESTREL_HOSTNAME}-\*/ , \
    /^[[:space:]]*[Hh]ost[[:space:]]+.*|^[[:space:]]*$/ {
        
        # delete the line of Host kestrel-*
        /^[[:space:]]*[Hh]ost[[:space:]]+${KESTREL_HOSTNAME}-\*/d

        # delete everything except the remaining (next) Host
        /^[[:space:]]*[Hh]ost[[:space:]]+.*/"\!"d 
    }" /etc/ssh/ssh_config

fi

# Get the number of the line of the first Host entry
num=$(grep -E -m1 -n "^[[:space:]]*[Hh]ost[[:space:]]+" /etc/ssh/ssh_config)
num=${num%%:*}

# If there is not Host entry then include kestrel entries at the end of the file
if [ -z "${num}" ]; then
    (
    echo
    echo "Host ${KESTREL_HOSTNAME}-*"
    echo "    StrictHostKeyChecking yes"
    echo "    HashKnownHosts no"
    echo "    UserKnownHostsFile /dev/null"
    ) >> /etc/ssh/ssh_config

else
    # Add kestrel Host entry before the first Host entry
    sed -ri "${num} i\
Host ${KESTREL_HOSTNAME}-*\n\
    StrictHostKeyChecking yes\n\
    HashKnownHosts no\n\
    UserKnownHostsFile /dev/null\n" /etc/ssh/ssh_config
fi


if [ "${SSH_PUBLICKEY}" == "false" ]; then
    sed -ri "/^[[:space:]]*PubkeyAuthentication[[:space:]]+yes/s/yes/no/" \
             /etc/ssh/sshd_config

    if ! grep -qE ^[[:space:]]*PubkeyAuthentication /etc/ssh/sshd_config; then
        echo "PubkeyAuthentication no " >> /etc/ssh/sshd_config
    fi
else if [ "${SSH_PUBLICKEY}" == "true" ]; then
    sed -ri "/^[[:space:]]*PubkeyAuthentication[[:space:]]+no/s/no/yes/" \
             /etc/ssh/sshd_config
fi

/etc/init.d/ssh restart &> /dev/null


# Recreate ssh keys for each user in the cluster, and add them to 'authorized
# keys' allowing password-less authentication into the cluster's nodes.
for user in $(list_users); do

    user_sshkeygen ${user}

done >/dev/null

