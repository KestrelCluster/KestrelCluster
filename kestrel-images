#!/bin/bash

# Copyright (C) 2010, 2011 Jon Ander Hern√°ndez
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


[ -z   "$KESTREL_SHARE" ] && KESTREL_SHARE=/usr/share/kestrel
[ ! -d "$KESTREL_SHARE" ] && KESTREL_SHARE="${0%/*}/share"

# Load kestrel_lib
. "$KESTREL_SHARE"/kestrel-lib
. "$KESTREL_SHARE"/reconfigure-lib

export_config

_new() {
    local image_name="$1"
    local image_dir="${KESTREL_IMAGE_DIR}/${image_name}"
    
    # Lock the image, so nobody can start any node while the image is being
    # created
    (
    lock_image "${image_name}" "non-block" || 
        die "Invalid image name, already exists an image named ${image_name}"
    
    # Verify the name only includes [0-9A-Za-z_] characters
    [[ ! "${image_name}" =~ ^${image_re}$ ]] &&
        die "Invalid image name"
    
    # Verify the image name
    [[ "${image_name}" == @("default"|"system"|cached-image) ]] &&
        die "Invalid image name, \"${image_name}\" is reserved"
    
    # Verify the image exists
    [ -d "$image_dir/usr" ] &&
        die "Invalid image name, already exists an image named ${image_name}"
    
    # Ensure this script is executed as root
    check_root
    
    local image_cache="${KESTREL_IMAGE_DIR}/cached-image"
    
    # Check if we support cached images, and if there is already a cached image
    if [[ "${CACHED_IMAGE}" == "true" && -d "${image_cache}" ]]; then
        
        # Check that the cache is not being created
        ( lock_image "cached-image" )
        
        msg "\nCreating the image from the image cache\n"
        
        # Show the progress : usr, lib, etc...
        for file in ${KESTREL_IMAGE_DIR}/cached-image/*; do
            msg "Copying ${file##*/}"
            cp -Ra "${file}" "${image_dir}" || _trap_copy_cached_image
        done
        
    # Create a new image using debootstrap
    else
        
        msg "\nCreating the image\n"
        
        # Share packages, binding to the directory of the host's package 
        # cache  
        mkdir -p "${image_dir}/var/cache/apt/archives" &&
        mount --bind /var/cache/apt/archives \
                     "${image_dir}/var/cache/apt/archives" || die
        
        msg "\ndebootstrap will take some time, please wait\n"
        
        # Create the image using debootstrap
        debootstrap "${OS_CODENAME}" "${image_dir}" \
            > "${image_dir}.debootstrap.log" ||     \
        # Finish correctly if debootstrap fails
        _trap_debootstrap \\
            "Debian boostraping tool failed to create an image" \\
            "- Check the internet conection" \\
            "- Check the log : ${image_dir}.debootstrap.log"
        
        # remove the 'I: ' and show a tab instead.
        sed 's/^I: /   /' ${quiet} < "${image_dir}.debootstrap.log"
        
        sync
        
        umount "${image_dir}/var/cache/apt/archives"

        if [ "${CACHED_IMAGE}" == "true" ] && 
           [ ! -d "${KESTREL_IMAGE_DIR}/cached-image" ]; then
          (
            lock_image "cached-image"
            
            msg "\nCreating image cache, please wait"
            # Show the progress : usr, lib, etc...
            for file in ${KESTREL_IMAGE_DIR}/cached-image/*; do
                msg "Copying ${file##*/}"
                cp -Ra "${file}" "${image_dir}" || _trap_cache_creation
            done
          )
        fi
    fi
    
    mount_chroot_image "${image_dir}"
    
    # Run the install scripts, install the required packages and run 
    # post-install scripts
    
    (
        close_lock
        node_install "install"
    )
    
    sync
    
    umount_chroot_image "${image_dir}"
    
    # If there is no other image, make it the default
    [ ! -e ${KESTREL_IMAGE_DIR}/default ] &&
        ln -snf ${image_dir} ${KESTREL_IMAGE_DIR}/default
    )
}


_trap_copy_cached_image() {
    # Delete partial image
    [ -d "${image_dir}" ] && rm -R "${image_dir}"
    exit 1
}


_trap_debootstrap() {
    sync
    
    # Unmount archives
    umount "${image_dir}/var/cache/apt/archives"
    
    # Delete partial image or partial cache-image
    [ -d "${image_dir}" ] && rm -R "${image_dir}"
    
    [ -n "{1}" ] && die "@"
}

_trap_cache_creation() {
    [ -d "${KESTREL_IMAGE_DIR}/cached-image" ] && 
        rm -R "${KESTREL_IMAGE_DIR}/cached-image"
    exit 1
}

# _remove <image_name>
# 
#     Remove the image <image_name>
# 
#         - Check the image is not locked
#         - Run install script (in uninstall mode)
#         - Set another image as default if the default one is being removed.        

_remove() {
    local image_name="${1}"
    local image_dir=${KESTREL_IMAGE_DIR}/${image_name}
    
    check_image
    
    # Ensure this script is executed as root
    check_root
    
    if [ -z "${quiet}" ]; then
        echo
        question="Do you really want to delete the image \"${image_name}\""
        question_yN "${question}" || exit 0
    fi
    
    # Lock the image, so nobody can start any node while the image is being
    # modified
    (
        lock_image "${image_name}"
        
        check_unmounted "${image_dir}"
        
        (   
            close_lock
            node_install "uninstall"
        )
        # If the deleted image was the default, set another one as default
        if [ "${image_name}" = "$(default-image)" ]; then

            new_default=$(list_images | grep -v "^${image_name}$" | head -n1)

            if [ -n "${new_default}" ]; then 
                ln -snf "${KESTREL_IMAGE_DIR}/${new_default}" \
                        "${KESTREL_IMAGE_DIR}/default"
            else
                rm "${KESTREL_IMAGE_DIR}/default"
            fi
        fi

        rm -R "${image_dir}"
        rm "${KESTREL_IMAGE_DIR}/.${image_name}."*
    )

    msg "" "Image \"${image_name}\" deleted" ""
}


# _delete <image_name>
# 
#     Remove the image <image_name>

_delete() {
    _remove "${1}"
}


# _set-default <image_node>
# 
#     Set <image_node> as the default node image

_set-default() {
    local image_name="${1}"
    local image_dir="${KESTREL_IMAGE_DIR}/${image_name}"
    
    check_image no_running_check
    
    # Ensure this script is executed as root
    check_root
    
    # Verify the image name
    if [ "$image_name" = "$(default-image)" ]; then
        die "default is already the default"
    fi
    
    ln -snf "${image_dir}" "${KESTREL_IMAGE_DIR}/default"
}


# _chroot <image_name>
# 
#     Chroot into image <image_name>

_chroot() {
    local image_name="${1}"
    local image_dir="${KESTREL_IMAGE_DIR}/${image_name}"
    
    check_image
    
    # Ensure this script is executed as root
    check_root
    
    # Lock the image, so nobody can start any node while the image is being
    # modified
    (
        lock_image "${image_name}"
        
        check_unmounted "${image_dir}"
        
        mount_chroot_image "${image_dir}"
        
        (
            close_lock
            
            export LANG=C
            chroot "${image_dir}" /bin/bash
        )
        
        sync 
        
        umount_chroot_image "${image_dir}"
    )
}


# _chroot <image_name>
# 
#     Chroot into image <image_name>

_lxc() {
    local image_name="${1}"
    local image_dir="${KESTREL_IMAGE_DIR}/${image_name}"
    
    check_image
    
    # Ensure this script is executed as root
    check_root
    
    # Lock the image, so nobody can start any node while the image is being
    # modified
    (
        lock_image "${image_name}"
        
        mount_lxc_image "${image_dir}"
        
        (
            export LANG=C
            chroot "${image_dir}" /bin/bash
        )
        
        sync 
        
        umount_lxc_image "${image_dir}"
    )
}


# _unlock <image_name>
# 
#     Force unlocking image <image_name>

_unlock() {
    local image_name="${1}"
    local image_dir="${KESTREL_IMAGE_DIR}/${image_name}"

    check_image

    # Ensure this script is executed as root
    check_root

    rm_lock_image
}


# _umount <image_name>
# 
#     Force unmounting image <image_name>

_umount() {
    local image_name="${1}"
    local image_dir="${KESTREL_IMAGE_DIR}/${image_name}"

    check_image

    # Ensure this script is executed as root
    check_root

    umount_chroot_image "${image_dir}"
}


usage() {
echo "
Usage: ${0##*/} [options] commands

Commands:

   --new <image name>
     Create a new image for nodes

   --remove <image name>
     Delete the image from the system

   --list
     List installed images

   --chroot <image>
     Chroot into an image

   --lxc <image>
     Chroot into an image

   --set-default <image>
     Set the default image

   --default-image
     Show default image

Options:
   --quiet
     When creating a new image, hide debootstrap's output

   --use-cache
   --use-no-cache
     Use cache when creating a new image

Only use these commands if you know what you are doing :-)

   --unlock <image>
   --umount <image>
"
}


for param in "$@"; do
    case $param in
        --use-cache)
            CACHED_IMAGE="true"
            ;;
        --use-no-cache)
            CACHED_IMAGE="false"
            ;;
        --quiet)
            quiet=">/dev/null"
            ;;
        --version|-v)
            kestrel_version
            ;;
        --help|-h)
            usage
            ;;
     esac
done


# If no parameter is specified
(( $# == 0 )) && usage-error


while (( $# > 0 )); do
    case ${1} in
        --new|--set-default)
            (( $# >= 2 )) || usage-error
            _${1#--} "$2"
            ;;
            
        --remove|--delete|--chroot|--lxc|--unlock|--umount)
            op=${1#--}
            
            # Check for the optional parameter
            if [[ -n "${2}" && ! "${2}" =~ ^--.+ ]]; then
                image=$2
                shift
            else
                image=default
            fi
            
            _${op} "${image}"
            ;;
            
        --list)
            list_images
            ;;
            
        --default-image)
            default-image
            ;;
            
        --use-cache|--use-no-cache|--quiet|--version|-v|--help|-h)
            shift
            continue
            ;;
            
        *)
            usage-error
            ;;
    esac
    exit 0
done
