#!/bin/bash
 
# Copyright (C) 2010, 2011 Jon Ander Hern√°ndez
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


[ -z   "$KESTREL_SHARE" ] && KESTREL_SHARE=/usr/share/kestrel
[ ! -d "$KESTREL_SHARE" ] && KESTREL_SHARE="${0%/*}/share"

# Load kestrel_lib
. "$KESTREL_SHARE"/kestrel-lib
. "$KESTREL_SHARE"/node-status-lib


# check_connected <hostname>
# 
#     Checks if the node is connected

check_connected() {
   if ! connected_nodes | grep -Eq "^${host}$"; then
        die "Node \"${host}\" is not connected"
   fi
}


# _ssh <hostname> [commands]
# 
#     Start a ssh session on the hostname, or run commands on the hostname

_ssh() {
    local host=${1}
    
    shift
    
    # Check if it is a valid hostname and if it is registered
    check_hostname "${host}"
    
    # Check if it is connected
    check_connected "${host}"
    
    check_user
    
    unset SSH_AUTH_SOCK
    
    ssh "${host}" "$@"
}


# _list_groups
# 
#     --groups

_groups() {
    list_groups
}

# _connected
# 
#     --connected [<group_name]|[image_name]

_connected() {
    local group
    local image
    if [[ "$1" =~ [0-9A-Za-z_]+ ]]; then
        if list_groups | grep -Eq "^$1$"; then
            group="${1}"
        elif list_images | grep -Eq "^$1$"; then
            image="${1}"
        else
            die "Unknown hostname or group \"${1}\""
        fi
    elif [ -n "$1" ]; then
        die "Invalid hostname or group \"${host}\""
    fi
    
    connected_nodes "${group}" | while read node; do
        ip=$(hostname_2_ip ${node})
        mac=$(hostname_2_mac ${node})
        node_image=$(connected_image ${node})
        [[ -z "${image}" || "${image}" == "${node_image}" ]] && 
        msg "${node}, image:${node_image}, mac:${mac}, ip=${ip}"
    done
}

# _disconnected
# 
#     --disconnected [<group_name]

_disconnected() {
    [ -n "${1}" ] && check_group ${1}
    
    registered_nodes "$1" | while read node; do
        ip=$( hostname_2_ip  ${node})
        mac=$(hostname_2_mac ${node})
        msg "${node}, mac:${mac}"
    done
}

# _registered
# 
#     --registered [<group_name]

_registered(){
    [ -n "${1}" ] && check_group ${1}
    
    registered_nodes "$1" | while read node; do
        ip=$( hostname_2_ip  ${node})
        mac=$(hostname_2_mac ${node})
        msg "${node}, mac:${mac}, ip:${ip}"
    done
}

# wake_node <mac> <image_name>
# 
#     Start up a node

wake_node() {
    local mac=${1}
    local host=${2}
    
    msg "Starting up \"${host}\", mac:\"${mac}\""
    
    action="wake"
    run_script "${KESTREL_SHARE}/event.d"
}

# shutdown_node <halt|reboot> <hostname> <image_name>
# 
#      Halt or reboot a node

shutdown_node() {
    local op=${1}
    local host=${2}
    local image_name=${3}
    local fail=
    #local title=$(sed -r '/^(.)/s//\U\1\E/' <<<${op})
        
    local ip=$( hostname_2_ip  ${host})
    local mac=$(hostname_2_mac ${host})
    
    if [ "${op}" == "halt" ]; then
        msg "Halting the \"${host}\", ip:${ip}"
    else
        msg "Rebooting the \"${host}\", ip:${ip}"
    fi
    
    action="${op}"
    run_script "${KESTREL_SHARE}/event.d"
    
    if [ -n "${fail}" ]; then
        return 1
    fi
}


# op_mac <wake|halt|reboot> <mac> <image_name>
# 
#     wake|halt|reboot a node by its mac

op_mac() {
    local op=$1
    local mac=$2
    local image_name=$3
    
    check_mac "${mac}"
    
    host=$(mac_2_hostname ${mac})
    
    check_kestrel_daemon
    check_root
    
    case ${op} in
        wake)
            check_image ${image_name}
            wake_node "${mac}" "${host}" "${image_name}"
            ;;
        reboot)
            check_connected "${host}"
            check_image ${image_name}
            shutdown_node "reboot" "${host}" "${image_name}"
            ;;
        halt)
            check_connected "${host}"
            shutdown_node "halt" "${host}" 
            ;;
     esac
     echo
}


# op_hostname <wake|halt|reboot> <hostname> <image_name>
# 
#     wake|halt|reboot a node

op_node() {
    local op=$1
    local host=$2
    local image_name=$3
    
    check_hostname "${host}"
    
    check_kestrel_daemon
    check_root
    
    case ${op} in
        wake)
            check_image ${image_name}
            mac=$(hostname_2_mac ${host})
            wake_node "${mac}" "${host}" "${image_name}"
            ;;
        reboot)
            check_connected "${host}"
            check_image ${image_name}
            shutdown_node "reboot" "${host}" "${image_name}"
            ;;
        halt)
            check_connected "${host}"
            shutdown_node "halt" "${host}" 
            ;;
     esac
     echo
}


# op_hostname <wake|halt|reboot> <group> <image_name>
# 
#     wake|halt|reboot a group of nodes.

op_group() {
    local op=$1
    local group=$2
    local image_name=$3
    
    check_group "${group}"
    
    check_kestrel_daemon
    check_root
    
    echo
    case ${op} in
        wake)
            check_image ${image_name}
            disconnected_nodes "${group}" | while read node; do
            
                mac=$(hostname_2_mac ${node})
                wake_node "${mac}" "${node}" "${image_name}"
                
                sleep ${WAKEUP_SLEEP}
            done;
            ;;
        reboot)
            check_image ${image}
            connected_nodes "${group}" | while read node; do
            
                shutdown_node "reboot" "${node}" "${image_name}"
            
            done;
            ;;
        halt)
            connected_nodes "${group}" | while read node; do
            
                shutdown_node "halt" "${node}"
            
            done;
            ;;
    esac
    echo
}


# _remove_mac <mac>
# 
#     Creates a disregister event

_remove_mac() {
    local mac=$1
    
    check_mac "${mac}"
    
    check_root
    
    host=$(mac_2_hostname ${mac})
    
    action="desregister"
    run_script "${KESTREL_SHARE}/event.d"
    
    msg "${host}, mac:${mac} removed"
}


# _remove_node <mac>
# 
#     Creates a disregister event

_remove_node() {
    local host=$1
    
    check_hostname "${host}"
    
    check_root
    
    mac=$(hostname_2_mac ${host})
    
    action="desregister"
    run_script "${KESTREL_SHARE}/event.d"
    
    msg "${host}, mac:${mac} removed"
}


# _remove_group <group>
# 
#     Creates a disregister event

_remove_group() {
    local group=$1
    
    check_group "${group}"
    
    check_root
    
    registered_nodes "${1}" | while read node; do
        
        mac=$(hostname_2_mac ${node})
        
        action="desregister"
        run_script "${KESTREL_SHARE}/event.d"
        
        msg "${node}, mac:${mac} removed"
        
    done
}


_halt-cluster() {
    
    check_root
    
    if (( $(connected_nodes | wc -l) > 0 )); then
        for node in $(connected_nodes); do
            msg "Halting the \"${node}\", ip:$(hostname_2_ip ${node})"
            shutdown_node "halt" "${node}" || fail="^${node}$|${fail:-^$}"
        done
        msg "" "Waiting till the nodes shutdown"
        TIMEOUT=40 # Waits 20 seconds. (sleeps 0.5s)
        while (( $(connected_nodes | grep -Ev "${fail:-^$}" | wc -l) > 0 && 
                 ${TIMEOUT} > 0)); do
            TIMEOUT=$(( ${TIMEOUT} - 1 ))
            sleep .5
        done
    fi
}

# control_c
# 
#     Executed when the SIGINT signal is received

control_c() {
    action="stop-register"
    run_script "${KESTREL_SHARE}/event.d"
    
    # Clean the feedback file
    [ -e ${KESTREL_DATA_DIR}/register_feedback ] &&
      rm ${KESTREL_DATA_DIR}/register_feedback
    
    [ -e ${KESTREL_LOCK_DIR}/register ] &&
      rm ${KESTREL_LOCK_DIR}/register
    
    exit 0
}


# register <group_name> [<image>]
# 
#     Register new nodes to the group <group_name>, and boot them using 
#     <image> or the default image

_register() {
    local group=$1
    image_name=$2
    image_dir=${KESTREL_IMAGE_DIR}/${image_name}

    check_image "${image_name}"

    check_kestrel_daemon
    
    # Ensure this script is executed as root
    check_root

    lock_image ${image_name}
    
    action="start-register"
    run_script "${KESTREL_SHARE}/event.d"
    
    # Use a file to mark that the registration process is active.
    # kestrel-daemon by default ignores register events
    echo "${group}" > "${KESTREL_LOCK_DIR}/register"
    
    # Clean the feedback file
    [ -e ${KESTREL_DATA_DIR}/register_feedback ] &&
      rm ${KESTREL_DATA_DIR}/register_feedback
    
    # Set the trap
    trap control_c SIGINT SIGTERM
    
    msg "" \
        "Turn now on the nodes to add them to the group \"${group}\" with the image \"${image_name}\"" \
        "" \
        "Press crtl+c when you are done" \
        ""
    
    # Show feedback
    while :; do
       sleep 1;
       [ -e ${KESTREL_DATA_DIR}/register_feedback ] &&
       cat  ${KESTREL_DATA_DIR}/register_feedback &&
       rm   ${KESTREL_DATA_DIR}/register_feedback
    done
}


usage() {
echo "
Usage: ${0##*/} options

OPTIONS:

   Run
   
   --ssh  <hostname> [commands]

   Node status

   --groups
       List registered groups
     
   --connected      [<group name>]|[image name]
   --disconnected   [<group name>]
   --registered     [<group name>]
       List connected nodes.
       List the group's nodes if the group is specified.

   --connected-groups
   --disconnected-groups
       List groups with connected or disconnected nodes.

   Add/Remove nodes

   --register      [<group-name>]   [<image>]
   --remove-mac    <mac>         
   --remove-node   <hostname>    
   --remove-group  <group-name>  
   
   Wake up/halt nodes

   --wake-mac      <mac>            [<image>]
   --wake-node     <hostname>       [<image>]
   --wake-group    <group name>     [<image>]
   
   --reboot-mac    <mac>            [<image>]
   --reboot-node   <hostname>       [<image>]
   --reboot-group  <group name>     [<image>]
   
   --halt-mac      <mac>         
   --halt-node     <hostname>    
   --halt-group    <group name>  
   
   --halt-cluster
"
}


for param in $@; do
   [ ${param} == "--quiet" ] && quiet=">/dev/null"
done


# If no parameter is specified
(( $# == 0 )) && usage-error


while (( $# > 0 )); do
    case $1 in
        --ssh)
            (( $# >= 2 )) || usage-error
            hostname=$2
            shift
            shift
            _ssh ${hostname} $@
            exit 0
            ;;

        --groups)
            _${1#--}
            exit 0
            ;;
            
        --connected|--disconnected|--registered)
            op=${1#--}
            
            # Check for the optional parameter
            #       --connected      [<group name>]|[image name]
            #       --disconnected   [<group name>]
            #       --registered     [<group name>]
            if [[ ! "${2}" =~ ^--.+ && -n "${2}" ]]; then
                group=$2
                shift
            fi
            
            _${op} "${group}"
            exit 0
            ;;
            
        --connected-groups)
            connected_groups
            ;;

        --disconnected-groups)
            disconnected_groups
            ;;
            
        --register)
            
            # Check for the optional parameter
            #       --register      [<group-name>]  [<image>]
            if [[ ! "${2}" =~ ^--.+ && -n "${2}" ]]; then
                group=$2
                shift
            else
                group="group1"
            fi
            
            # Check for the second optional parameter
            if [[ ! "${2}" =~ ^--.+ && -n "${2}" ]]; then
                image=$2
                shift
            else
                image="default"
            fi
            
            _register "${group}" "${image}"
            exit 0
            ;;

        --wake-mac|--wake-node|--wake-group)
            (( $# >= 2 )) || usage-error
            op=${1#--wake-}
            
            data=${2}
            shift
            
            # Check for the optional parameter
            #       --wake-mac      <mac>         [<image>]
            #       --wake-node     <hostname>    [<image>]
            #       --wake-group    <group name>  [<image>]
            if [[ ! "${2}" =~ ^--.+ && -n "${2}" ]]; then
                image=$2
                shift
            fi
            
            op_${op} "wake" "${data}" ${image:-default}
            exit 0
            ;;

        --reboot-mac|--reboot-node|--reboot-group)
            (( $# >= 2 )) || usage-error
            op=${1#--reboot-}
            
            data=${2}
            shift
            
            # Check for the optional parameter
            #       --reboot-mac    <mac>         [<image>]
            #       --reboot-node   <hostname>    [<image>]
            #       --reboot-group  <group name>  [<image>]
            if [[ ! "${2}" =~ ^--.+ && -n "${2}" ]]; then
                image=$2
                shift
            fi
            
            op_${op} "reboot" "${data}" ${image:-default}
            exit 0
            ;;
             
        --halt-mac|--halt-node|--halt-group)
            # Parameters
            #       --halt-mac      <mac>         
            #       --halt-node     <hostname>    
            #       --halt-group    <group name> 
            (( $# >= 2 )) || usage-error
            op=${1#--halt-}
            
            data=${2}
            shift
            
            op_${op} "halt" "${data}" ${image:-default}
            exit 0
            ;;
            
        --remove-mac|--remove-node|--remove-group)
            # Parameters
            #       --remove-mac    <mac>         
            #       --remove-node   <hostname>    
            #       --remove-group  <group-name>
            (( $# >= 2 )) || usage-error
            op=${1#--remove-}
            
            data=${2}
            shift
            
            _remove_${op} "${data}"
            exit 0
            ;;
            
        --halt-cluster)
            _halt-cluster
            exit 0
            ;;
            
        --version|-v)
            kestrel_version
            exit 0
            ;;

        --help|-h)
            usage
            exit 0
            ;;

        *)
            usage-error
            ;;
    esac
    shift
done

