if [ -e /usr/share/kestrel/kestrel-lib ]; then

_kestrel_load_config() {
    [ -z "$KESTREL_SHARE" ] && KESTREL_SHARE=/usr/share/kestrel

    . "$KESTREL_SHARE"/defaults-lib
}

_kestrel_list_groups() {
    local re
    re="^[^#]*,\s*${KESTREL_HOSTNAME}-(${_k_group_re})-${node_re}[^0-9]*$"
    sed -rn "s/${re}/\1/p" ${KESTREL_REG_NODES} | sort | uniq 
}

_kestrel_connected_nodes() {
    local group re
    if [ -n "$1" ]; then
        group="${1}"
    else
        group="${group_re}"
    fi
    re="^\s*${ip_re}\s+(${KESTREL_HOSTNAME}-${group}-${node_re})([^0-9].*)*$"
    sed -rn "s/${re}/\1/p" ${KESTREL_CON_NODES} | sort
}

_kestrel_connected_groups() {
    local re
    re="^\s*${ip_re}\s+${KESTREL_HOSTNAME}-(${group_re})-${node_re}([^0-9].*)*$"
    sed -rn "s/${re}/\1/p" ${KESTREL_CON_NODES} | sort | uniq
}

_kestrel_disconnected_nodes() {

    echo $(_kestrel_connected_nodes $1) $(_kestrel_registered_nodes $1) | 
    sed -r 's/[[:space:]]/\n/g' | sort | uniq --unique
}

_kestrel_disconnected_groups() {
    local re
    re="^${KESTREL_HOSTNAME}-(${group_re})-.*$"
    _kestrel_disconnected_nodes | sed -rn "s/${re}/\1/p" | sort | uniq
}

_kestrel_registered_nodes() {
    local group re
    if [[ -n "$1" && "$1" =~ ${group_re} ]]; then
        group="${1}"
    else
        group="${group_re}"
    fi
    re="^[^#]*,\s*(${KESTREL_HOSTNAME}-${group}-${node_re})[^0-9]*$"
    sed -rn "s/${re}/\1/p" ${KESTREL_REG_NODES} | sort
}

_kestrel_registered_groups() {
    local re
    re="^[^#]*,\s*${KESTREL_HOSTNAME}-(${group_re})-${node_re}[^0-9]*$"
    sed -rn "s/${re}/\1/p" ${KESTREL_REG_NODES} | sort | uniq
}

_kestrel_list_users() {
    echo $KESTREL_USER
    sed < /etc/group -nr "s/^${KESTREL_GROUP}:.*:.*:(.+)$/\1/p" | sed 's/,/\n/'
}

_kestrel_list_images() {
    ls -1 ${KESTREL_IMAGE_DIR} | grep -Ev "default|cached-image"
}

_kestrel_backup_files() {
    local os_dir="${1}"
    
    [ -d "${os_dir}/${KESTREL_BACKUP_DIR}/" ] &&
    ( cd "${os_dir}/${KESTREL_BACKUP_DIR}/";
        
      # List backup files which match the regular expression
      find . -regextype posix-egrep \
             -type f -iregex "${backup_back_re}$" | 
      
      sed -r 's#\.\/'${backup_back_re}'#\1\2#' | uniq
    )
}

_kestrel_backup_versions2() {
    local os_dir="${1}"
    local   file="${2}"
    
    ( cd "${os_dir}/${KESTREL_BACKUP_DIR}/"
      
             #\( -type l -iregex ".*/${backup_link_re}$" \) \
             #-o         -iregex ".*/${backup_back_re}$" | \

      # List backup files which match the regular expression
      find . -regextype posix-egrep \
             -iregex ".*/${file}${version_re}$" | \
      while read file; do
          file="${file##*\:}"
          case ${file} in
              [0-9]*)
                  echo $file
                  date -d "@${file}" "+%F_%T"
                  ;;
              last)
                  echo -e "last\nactual"
                  ;;
              *)
                  echo $file
          esac
      done )
}

_list_log_dates() {
    local stage="${1}"
    local   log="${image_dir}/${KESTREL_LOG_DIR}/${stage}"
    
    [ -f "${log}" ] &&
        grep -E "${log_time_re}" "${log}"
}

_list_log_dates2() {
    local stage="${1}"
    local   log="${image_dir}/${KESTREL_LOG_DIR}/${stage}"
    
    [ -f "${log}" ] &&
        sed -rn 's#^'"${log_time_re}"'$#\1_\3#p' "${log}"
}

_kestrel_longopt() {
    COMPREPLY=( $( compgen -W "$( $1 --help 2>&1 | \
            sed -ne 's/.*\(--[-A-Za-z0-9]\{1,\}\).*/\1/p' | sort -u )" \
            -- "$cur" ) )
}


have kestrel-apt &&
_kestrel_apt()
{
    local cur prev special i
    local kestrel_image=${KESTREL_IMAGE_DIR}/default
    
    COMPREPLY=()
    _get_comp_words_by_ref cur prev
    _kestrel_load_config
    
    for (( i=0; i < ${#COMP_WORDS[@]}-1; i++ )); do
        if [[ ${COMP_WORDS[i]} == @(--install|--remove|--delete) ]]; then
            special=${COMP_WORDS[i]}
        fi
        ii==$(( i+1 ))
        if [[ ${COMP_WORDS[i]} == --image && -n "${COMP_WORDS[ii]}" ]]; then
            kestrel_image=${COMP_WORDS[ii]}
        fi
    done
    
    if [ -n "$special" ]; then
        case $special in
#            --remove|--delete)
#                    awk 'BEGIN {FS="\n"; RS="\n\n"} /install ok installed/ { } ' /var/lib/dpkg/status
#                    COMPREPLY=( $( _comp_dpkg_installed_packages $cur ) )
#                ;;
            *)
                COMPREPLY=( $( apt-cache --no-generate pkgnames "$cur" \
                    2> /dev/null ) )
                ;;
        esac
        return 0
    fi
    
    case $prev in
        --image)
            # some aliases removed
            COMPREPLY=( $( compgen -W "$( _kestrel_list_images )" -- "$cur" ) )
            return 0
            ;;
    esac
    
    _kestrel_longopt kestrel-apt
    
} &&
complete -F _kestrel_apt kestrel-apt


have kestrel-nodes &&
_kestrel_nodes()
{
    local cur prev
    COMPREPLY=()
    _get_comp_words_by_ref cur prev
    _kestrel_load_config
    
    case $prev in
        --ssh)
            COMPREPLY=( $( compgen -W "$( _kestrel_connected_nodes )" -- \
                           "$cur" ) )
            return 0
            ;;
        --connected|--disconnected|--registered)
            COMPREPLY=( $( compgen -W "$( _kestrel_registered_groups )" -- \
                           "$cur" ) )
            return 0
            ;;
        --wake-mac)
            # TODO
            return 0
            ;;
        --reboot-mac|--halt-mac)
            # TODO
            return 0
            ;;
        --wake-node)
            COMPREPLY=( $( compgen -W "$( _kestrel_disconnected_nodes )" -- \
                           "$cur" ) )
            return 0
            ;;
        --reboot-node|--halt-node)
            COMPREPLY=( $( compgen -W "$( _kestrel_connected_nodes )" -- \
                           "$cur" ) )
            return 0
            ;;
        --wake-group)
            COMPREPLY=( $( compgen -W "$( _kestrel_disconnected_groups )" -- \
                           "$cur" ) )
            return 0
            ;;
        --reboot-group|--halt-group)
            COMPREPLY=( $( compgen -W "$( _kestrel_disconnected_groups )" -- \
                           "$cur" ) )
            return 0
            ;;
    esac
    
    _kestrel_longopt kestrel-nodes
    
} &&
complete -F _kestrel_nodes kestrel-nodes


have kestrel-images &&
_kestrel_images()
{
    local cur prev
    COMPREPLY=()
    _get_comp_words_by_ref cur prev
    _kestrel_load_config

    case $prev in
      --remove|--delete|--chroot|--set-default|--unlock|--umount)
            COMPREPLY=( $(compgen -W "$(_kestrel_list_images)" -- "$cur" ) )
            return 0
            ;;
    esac
    
    _kestrel_longopt kestrel-images
    
} &&
complete -F _kestrel_images kestrel-images


have kestrel-users &&
_kestrel_users()
{
    local cur prev
    COMPREPLY=()
    _get_comp_words_by_ref cur prev
    _kestrel_load_config

    case $prev in
      --delete|--remove)
            COMPREPLY=( $(compgen -W "$(_kestrel_list_users)" -- "$cur" ) )
            return 0
            ;;
      --add-to-cluster)
            COMPREPLY=( $( compgen -u -- "$cur" ) )
            return 0
            ;;
    esac
    
    _kestrel_longopt kestrel-users
    
} &&
complete -F _kestrel_users kestrel-users


have kestrel-daemon &&
_kestrel_daemon()
{
    local cur prev
    COMPREPLY=()
    _get_comp_words_by_ref cur prev
    
    _kestrel_longopt kestrel-daemon   
} &&
complete -F _kestrel_daemon kestrel-daemon


have kestrel-configure &&
_kestrel_configure()
{
    local cur prev words cword i image_name image_dir
    COMPREPLY=()
    _get_comp_words_by_ref cur prev words cword
    _kestrel_load_config
    
    for (( i=0; i < ${#COMP_WORDS[@]}-1; i++ )); do
        if [[ ${COMP_WORDS[i]} == "--image" ]]; then
            if [[ -z "${COMP_WORDS[i+1]}" || ${COMP_WORDS[i+1]} =~ ^--.* ]]; then
                image_name=default
            else
                image_name=${COMP_WORDS[i+1]}
            fi
        elif [[ ${COMP_WORDS[i]} == "--system" ]]; then
            image_name=
        fi
    done
    
    [ -n "${image_name}" ] && 
        image_dir="${KESTREL_IMAGE_DIR}/${image_name}"
    
    case $prev in
      --image)
            COMPREPLY=( $(compgen -W "$(_kestrel_list_images)" -- "$cur" ) )
            return 0
            ;;
            
      --edited-info) # [file]
            if [ -d  ${image_dir}/${KESTREL_LOG_DIR} ]; then
                local list="$(ls -1 ${image_dir}/${KESTREL_LOG_DIR})"
                COMPREPLY=( $(compgen -W "${list}" -- "$cur" ) )
            fi
            return 0
            ;;
            
      --templates)
            if [ -z "${image_dir}" ]; then
                local list="$(ls -1 ${KESTREL_SHARE}/system | sed 's/\.d$//' )"
                COMPREPLY=( $(compgen -W "${list}" -- "$cur" ) )
            else
                loca list="$(ls -1 ${KESTREL_SHARE}/node | sed 's/\.d$//' )"
                COMPREPLY=( $(compgen -W "${list}" -- "$cur" ) )
            fi
            return 0
            ;;
            
      --restore) #  <file>
            ;;
            
      --diff)
            local list=$(_kestrel_backup_files "${image_dir}")
            COMPREPLY=( $(compgen -W "${list}" -- "$cur" ) )
            return 0
            ;;
            
      --log-file)
            if [ -d  ${image_dir}/${KESTREL_LOG_DIR} ]; then
                local list="$(ls ${image_dir}/${KESTREL_LOG_DIR})"
                COMPREPLY=( $(compgen -W "${list}" -- "$cur" ) )
            fi
            return 0
            ;;
            
      --set-option)
            COMPREPLY=( $(compgen -W "$(variable_list2)" -- "$cur" ) )
            return 0
            ;;
    esac
    
    if (($cword > 2)); then
        case "${words[cword-2]}" in
            --log-file)
                local list=$(_list_log_dates2 "$prev")
                COMPREPLY=( $(compgen -W "${list}" -- "$cur" ) )
                return 0
                ;;
            --diff)
                local list=$(_kestrel_backup_versions2 "${image_dir}" "${prev}")
                COMPREPLY=( $(compgen -W "${list}" -- "$cur" ) )
                return 0
                ;;
        esac
    fi
    
    if (($cword > 3)); then
        case "${words[cword-3]}" in
            --diff)
                prev="${words[cword-2]}"
                local list=$(_kestrel_backup_versions2 "${image_dir}" "${prev}")
                COMPREPLY=( $(compgen -W "${list}" -- "$cur" ) )
                return 0
                ;;
        esac
    fi
    
    _kestrel_longopt kestrel-configure
    
} &&
complete -F _kestrel_configure kestrel-configure

fi
