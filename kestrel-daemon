#!/bin/bash

# kestrel-daemon
#
# Run register scripts when a new event occurs.
# Those event are notified to the daemon througth the rpc/fifo
#

[ -z "$KESTREL_LIB" ] && KESTREL_LIB=/usr/share/kestrel

# Load kestrel_lib
. "$KESTREL_LIB"/kestrel-lib

# Export loaded configuration
export_config

# Local variables
NAME=${0##*/}
LOGFILE=/var/log/${NAME}.log
PIDFILE=/var/run/${NAME}.pid
LOCKFILE=/var/lock/${NAME}.lock


# Check parameters
case $1 in
    --version|-v)
        kestrel_version
        exit 0
        ;;
    --help)
        echo "KestrelHPC daemon"
        exit 0
        ;;
esac


# Check if the daemon is already running
if [[ -e "${PIDFILE}" &&
      -e "/proc/$(cat ${PIDFILE})" ]]; then
      
    echo "${NAME} already running"
    exit 1
    
fi

# Remove the PIDFILE and exit when the daemon receives a SIGTERM signal
close() {
   exec 200> ${LOCKFILE}
   flock -x 200
   rm -f ${PIDFILE}
   rm -f ${LOCKFILE}
   exit 0 
}


# fork twice so the innermost subshell detaches from the current process
(   (
        # Delete the lock
        rm "${LOCKFILE}" &>/dev/null
        
        trap close SIGINT SIGTERM
        
        while :; do
            while read read_line; do
                ( 
                #    flock -s 200
                    
                    # Run the event scripts when we read a line
                    run_event_scripts ${read_line}
                    
                ) # 200> ${LOCKFILE} &
            done < ${KESTREL_DATA_DIR}/rpc/fifo
        done
    
    ) &>> ${LOGFILE} </dev/null &

    # Write the pid of the innermost subshell to the PIDFILE
    echo $! > ${PIDFILE} 
)

exit 0
